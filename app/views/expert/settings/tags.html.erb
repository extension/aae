<h1><%= link_to @user.name, expert_user_path(@user.id) %></h1>

<h2>Tag Preferences</h2>

<%= render :partial => 'expert/settings/settings_navigation' %>

<div class="explanation">
  <div class="bigtag"></div>
  <% if current_user.id == @user.id %>
  <h3>Tags indicate what kind of questions you want to answer.</h3>
  <% else %>
  <h3>Tags indicate what kind of questions <%= @user.first_name %> wants to answer.</h3>
  <% end %>
  <p>Specifically, tags are used to make matches when reassigning questions. In addition to general terms (<span class="tag tag-topic"><%= link_to "horticulture", expert_home_tags_path("horticulture") %></span> or <span class="tag tag-topic"><%= link_to "apples", expert_home_tags_path("apples") %></span>), it's a great idea to include tags that are specific and granular (<span class="tag tag-topic"><%= link_to "spiders", expert_home_tags_path("spiders") %></span>, <span class="tag tag-topic"><%= link_to "4H", expert_home_tags_path("4H") %></span> or <span class="tag tag-topic"><%= link_to "tomatoes", expert_home_tags_path("tomatoes") %></span>)</p>
  <br class="clearing" />
</div>

<div class="formy">
  <h2>Add Tags</h2>
  <h3>It's easy! Just type and select a tag.</h3>
  <div class="ui-widget col-lg-3 col-md-4 col-sm-6">
  	<input id="tag_picker" class="form-control" placeholder="Type and select a tag..." />
  </div>
  <br class="clearing" />

<div id="tag_list" style="margin-top:1em; font-size:1.2em;">
<% if @user.tags.size > 0 %>
  <% @user.tags.each do |tag| %>
    <p id="tag_<%= tag.id %>"><span class="tag tag-topic"><%= link_to tag.name, expert_home_tags_path(tag.name) %></span> <span class="removetag">[x]</span></p>
  <% end %>
<% end %>
</div>

</div>

<script class="code" type="text/javascript">

		function add_tag(tag) {
		  $.ajax({
        type: "POST",
        url: "<%= expert_settings_add_tag_path(:id => @user.id) %>",
        cache: false,
        data: {tag: tag}
      })
      .done(function() {
				$("#tag_picker").autocomplete("close");
				$("#tag_picker").val('');
				return false;
      })  
      .fail(function() {
        alert("error");
        $("#tag_picker").autocomplete("close");
  			$("#tag_picker").val('');
  			return false;
      })
		}

    // create an instance of autocomplete plus a hack for using the 'enter' key instead of direct selection
    $(document).ready(function(){
		  $("#tag_picker").autocomplete({
        source: "/ajax/tags",
  			minLength: 2,
  			select: function(e, ui) {
  			  add_tag(ui.item.name);
  			}
  		}).keypress(function(e) {
        if (e.keyCode === 13) {
          if ($.trim(this.value) != "") {
            add_tag(this.value);
          } else {
            $("#tag_picker").val('');
    				return false;
          }
        }
      }).data( "autocomplete" )._renderItem = function( ul, item ) {
        return $( "<li></li>" )
        .data( "item.autocomplete", item )
        .append( "<a>"+ item.label + " <strong>(" + item.tag_count + ")</strong></a>" )
        .appendTo( ul );
      };
    });

    // remove tags
     $("#tag_list").on("click", ".removetag", function(){
       var tag = $(this).closest("p");
       $.ajax({
         type: "POST",
           url: "<%= expert_settings_remove_tag_path(:id => @user.id) %>",
           cache: false,
           data: {tag_id: tag.attr("id").replace('tag_', '')}
       })
       .done(function() {
         tag.fadeOut(500);
       })
     });

</script>